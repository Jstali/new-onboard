# =============================================================================
# NXZEN EMPLOYEE MANAGEMENT SYSTEM - DOCKER COMPOSE
# =============================================================================
# Environment-based configuration for flexible deployment
# =============================================================================

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-nxzen}_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-onboardd}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/COMPLETE_DATABASE_SETUP.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - nxzen_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-onboardd}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for sessions and caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-nxzen}_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - nxzen_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - redis

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-nxzen}_backend
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-onboardd}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - PORT=${BACKEND_PORT:-5001}
      - HOST=${SERVER_IP:-0.0.0.0}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - FRONTEND_URL=${FRONTEND_URL}
      - BACKEND_URL=${BACKEND_URL}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - backend_backups:/app/backups
    ports:
      - "${BACKEND_PORT:-5001}:5001"
    networks:
      - nxzen_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://149.102.158.71:5001/api}
    container_name: ${COMPOSE_PROJECT_NAME:-nxzen}_frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://149.102.158.71:5001/api}
      - FRONTEND_PORT=${FRONTEND_PORT:-80}
      - BACKEND_HOST=${BACKEND_HOST:-backend}
      - BACKEND_PORT=${BACKEND_PORT:-5001}
      - SERVER_IP=${SERVER_IP:-0.0.0.0}
    ports:
      - "${FRONTEND_PORT:-3001}:80"
    networks:
      - nxzen_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional - for advanced routing)
  nginx:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME:-nxzen}_nginx
    restart: unless-stopped
    environment:
      - FRONTEND_PORT=${FRONTEND_PORT:-80}
      - BACKEND_HOST=${BACKEND_HOST:-backend}
      - BACKEND_PORT=${BACKEND_PORT:-5001}
      - SERVER_IP=${SERVER_IP:-0.0.0.0}
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - nxzen_network
    depends_on:
      - frontend
      - backend
    profiles:
      - nginx

  # Database Backup Service (Optional)
  backup:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-nxzen}_backup
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - backend_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - nxzen_network
    depends_on:
      - postgres
    command: /bin/sh -c "while true; do sleep 86400; /backup.sh; done"
    profiles:
      - backup

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ${COMPOSE_PROJECT_NAME:-nxzen}_prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - nxzen_network
    profiles:
      - monitoring

  # Grafana for monitoring dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ${COMPOSE_PROJECT_NAME:-nxzen}_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "${GRAFANA_PORT:-3001}:3001"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - nxzen_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# Networks
networks:
  nxzen_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  backend_backups:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local