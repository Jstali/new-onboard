# =============================================================================
# NXZEN EMPLOYEE MANAGEMENT SYSTEM - PRODUCTION FRONTEND DOCKERFILE
# =============================================================================
# Multi-stage build optimized for production deployment with Nginx
# Features: Security, Performance, Caching, SSL Support
# =============================================================================

# Stage 1: Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install system dependencies for building
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    && rm -rf /var/cache/apk/*

# Copy environment configuration
COPY main.env .env

# Copy package files
COPY package*.json ./

# Install dependencies with optimizations
RUN npm ci --legacy-peer-deps --no-audit --no-fund --silent \
    && npm cache clean --force \
    && rm -rf /tmp/*

# Copy source code
COPY . .

# Create production environment file with build args
ARG REACT_APP_API_URL=http://149.102.158.71:2035/api
ARG REACT_APP_BASE_URL=http://149.102.158.71:2036
ARG REACT_APP_VERSION=1.0.0
ARG REACT_APP_BUILD_DATE
ARG REACT_APP_GIT_COMMIT

RUN echo "REACT_APP_API_URL=${REACT_APP_API_URL}" > .env.production && \
    echo "REACT_APP_BASE_URL=${REACT_APP_BASE_URL}" >> .env.production && \
    echo "REACT_APP_VERSION=${REACT_APP_VERSION}" >> .env.production && \
    echo "REACT_APP_BUILD_DATE=${REACT_APP_BUILD_DATE}" >> .env.production && \
    echo "REACT_APP_GIT_COMMIT=${REACT_APP_GIT_COMMIT}" >> .env.production && \
    echo "GENERATE_SOURCEMAP=false" >> .env.production

# Build the application with optimizations
RUN npm run build

# Stage 2: Production stage with Nginx
FROM nginx:1.25-alpine AS production

# Metadata
LABEL maintainer="NXZEN Development Team" \
      version="1.0.0" \
      description="NXZEN Employee Management System - Frontend" \
      org.opencontainers.image.source="https://github.com/nxzen/employee-management"

# Install additional tools
RUN apk add --no-cache \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create nginx user and set permissions
RUN adduser -S nxzen -u 1001 -G nginx

# Copy built application from builder stage
COPY --from=builder /app/build /usr/share/nginx/html

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Create nginx directories with proper permissions
RUN mkdir -p /var/cache/nginx \
    /var/log/nginx \
    /var/run \
    /etc/nginx/conf.d \
    && chown -R nxzen:nginx /var/cache/nginx \
    /var/log/nginx \
    /var/run \
    /usr/share/nginx/html \
    && chmod -R 755 /usr/share/nginx/html

# Create health check endpoint
RUN echo '<!DOCTYPE html><html><head><title>Health Check</title></head><body><h1>OK</h1></body></html>' > /usr/share/nginx/html/health

# Switch to non-root user
USER nxzen

# Expose ports
EXPOSE 80 443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

# =============================================================================
# PRODUCTION OPTIMIZATIONS
# =============================================================================
# - Multi-stage build reduces image size
# - Nginx for high performance serving
# - Non-root user for security
# - Health checks for monitoring
# - Proper signal handling with dumb-init
# - Optimized caching headers
# - Security headers
# - SSL support ready
# =============================================================================
